# Group by 'Data Date' for historical tracking (for time-series visualizations)
metrics_over_time = df_filtered.groupby('Data Date').apply(calculate_metrics).reset_index()

# For the current metrics display (most recent date)
# Get the most recent date in the filtered dataset
latest_date = df_filtered['Data Date'].max()
# Filter to just the latest date data
latest_metrics = metrics_over_time[metrics_over_time['Data Date'] == latest_date]

# Make sure we have data (if latest_metrics is empty, use a fallback)
if latest_metrics.empty and not metrics_over_time.empty:
    latest_metrics = metrics_over_time.iloc[[-1]]  # Use the latest available date
elif latest_metrics.empty and metrics_over_time.empty:
    # Create empty metrics as fallback if no data at all
    latest_metrics = pd.DataFrame({
        'Total Refresh Cabinet Count': [0],
        'Total Baseline Power (kW)': [0],
        'Baseline VM Count': [0],
        'Baseline Node Count': [0],
        'Completed Refresh Cab Count': [0],
        'Remaining Refresh Cab Count': [0],
        'Current Power Consumption (kW)': [0],
        'Total Power Recovered (kW)': [0],
        'Reclaimed Node Count': [0],
        'Active DAT Count': [0],
        'Current VMs': [0],
        'Remaining VM Count': [0]
    })
    st.warning("No data available for the selected filter criteria.")

# Site Summary Page
if selected_page == "Site Summary":
    st.title(f"ICPW Refresh Tracker - {selected_site if selected_site != 'All' else 'All Sites'}")
    
    # Display Baseline Metrics
    st.subheader("Baseline Metrics")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total Refresh Cabinets", int(latest_metrics['Total Refresh Cabinet Count'].iloc[0]))
    col2.metric("Total Baseline Power (kW)", round(latest_metrics['Total Baseline Power (kW)'].iloc[0], 2))
    col3.metric("Baseline VM Count", int(latest_metrics['Baseline VM Count'].iloc[0]))
    col4.metric("Baseline Node Count", int(latest_metrics['Baseline Node Count'].iloc[0]))
    
    # Display Current Metrics
    st.subheader("Current Metrics & Progress to Date")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Completed Refresh Cabinets", int(latest_metrics['Completed Refresh Cab Count'].iloc[0]))
    col2.metric("Remaining Refresh Cabinets", int(latest_metrics['Remaining Refresh Cab Count'].iloc[0]))
    col3.metric("Current Power Consumption (kW)", round(latest_metrics['Current Power Consumption (kW)'].iloc[0], 2))
    col4.metric("Current VM Count", int(latest_metrics['Current VMs'].iloc[0]))
    
    col1, col2, col3 = st.columns(3)
    col1.metric("Total Power Recovered (kW)", round(latest_metrics['Total Power Recovered (kW)'].iloc[0], 2))
    col2.metric("Reclaimed Node Count", int(latest_metrics['Reclaimed Node Count'].iloc[0]))
    col3.metric("Active DAT Count", int(latest_metrics['Active DAT Count'].iloc[0]))
    
    # Add Progress Visualization
    st.subheader("Progress Over Time")
    
    # Cabinet Progress Chart
    fig_cabinet = px.line(metrics_over_time, x='Data Date', 
                 y=['Total Refresh Cabinet Count', 'Completed Refresh Cab Count', 'Remaining Refresh Cab Count'],
                 labels={'value': 'Cabinet Count'}, 
                 title="Cabinet Refresh Progress Over Time")
    st.plotly_chart(fig_cabinet, use_container_width=True)
    
    # Power Trend Chart
    fig_power = px.line(metrics_over_time, x='Data Date', 
                y=['Total Baseline Power (kW)', 'Current Power Consumption (kW)', 'Total Power Recovered (kW)'],
                labels={'value': 'Power (kW)'}, 
                title="Power Consumption & Recovery Trend")
    st.plotly_chart(fig_power, use_container_width=True)
    
    # VM Count Chart
    fig_vm = px.line(metrics_over_time, x='Data Date', 
              y=['Baseline VM Count', 'Current VMs', 'Remaining VM Count'],
              labels={'value': 'VM Count'}, 
              title="VM Count Trend")
    st.plotly_chart(fig_vm, use_container_width=True)
    
    # Add progress completion percentage
    if latest_metrics['Total Refresh Cabinet Count'].iloc[0] > 0:
        completion_pct = (latest_metrics['Completed Refresh Cab Count'].iloc[0] / 
                          latest_metrics['Total Refresh Cabinet Count'].iloc[0] * 100)
        
        st.subheader("Overall Progress")
        st.progress(min(completion_pct/100, 1.0))
        st.write(f"**{round(completion_pct, 1)}%** of cabinets have been refreshed")
    
    # Pivot Table for Site & Space-Level Summarization
    st.subheader("Site & Space-Level Metrics Summary")
    pivot_data = df_filtered.groupby(['Site', 'Space']).apply(calculate_metrics).reset_index()
    st.dataframe(pivot_data.style.format({
        'Total Baseline Power (kW)': '{:.2f}',
        'Current Power Consumption (kW)': '{:.2f}',
        'Total Power Recovered (kW)': '{:.2f}',
    }))